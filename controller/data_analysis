import os
import pydub
from pydub import AudioSegment
import wave
import ffmpeg
from scipy.io import wavfile
import scipy.io
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import tkinter as tk
from tkinter import filedialog
from tkinter import *
import checkifwav
from checkifwav import converter_wav
import download as d
#
# def downloader():
#     converter_wav()
#     self = os.path.splitext(checkifwav.getFile())[0] + '.wav'
#     # initializes a variable for use with Pydub
#     original_audio = pydub.AudioSegment.from_file(self, format="wav")
#     global audioFile
#     new_filename = os.path.splitext(self)[0] + '_modified.wav'
#     audioFile = new_filename
#     # sets one channel
#     not_orignal = original_audio.set_channels(1)
#     # Exports converted file, and also removes metadata (tags).
#     not_orignal.export(new_filename, format="wav", tags={}, )
#     # Test to see if is worked
#     result = os.path.exists(new_filename)
#     print(result)


# displays the time length of the wav audio file
def displayTime():
    from view import Temp
    wave_time = pydub.AudioSegment.from_file(file=d.audioFile, format="wav")
    Temp.insert(tk.END, "Time: " + str(len(wave_time)))

#displays wave form
def displayForm():
    #displays wave form
def displayForm():
    from view import Temp
    wave_form = d.audioFile
    audio_file = wave.open(wave_form, "r")

    # Extract Raw Audio from Wav File
    raw_audio = audio_file.readframes(-1)
    print(type(raw_audio))  # Check the type of raw_audio (should be bytes)

    # Convert raw audio bytes to numpy array
    fre = np.frombuffer(raw_audio, dtype="int16")
    fs = audio_file.getframerate()  # Sampling frequency (frames per second)

    # Step 1: Get the power of the audio signal (absolute value)
    opower = np.abs(fre)

    # Step 2: Convert power to a logarithmic scale (dB)
    power = 20 * np.log10(opower + 1e-6)

    # Step 3: Trim power to make signal start at 0 dB
    power -= np.max(power)

    # Generate time axis based on the length of the signal and sampling frequency
    time = np.linspace(0, len(fre) / fs, num=len(fre))

    decay_threshold1 = -10
    decay_threshold2 = -5
    decay_threshold3 = -3

    # Step 4: Find the index where power drops below the threshold
    decay_start_idx1 = np.argmax(power < decay_threshold1)
    decay_start_idx2 = np.argmax(power < decay_threshold2)
    decay_start_idx3 = np.argmax(power < decay_threshold3)
    decay_times1 = time[decay_start_idx1:]  # Corresponding time values

    decay_times2 = time[decay_start_idx2:]  # Corresponding time values
    decay_times3 = time[decay_start_idx3:]  # Corresponding time values
    timeavg= (decay_times1 + decay_times2 + decay_times3) / 3
    diffrence = time - timeavg

    Temp.insert(tk.END, "\ndiffrence " + str(len(timeavg)))

#displays largest amplitude of the wav audio file.
def displayamplitude():
    from view import Temp
    wave_amp = pydub.AudioSegment.from_file(file=d.audioFile, format="wav")
    Temp.insert(tk.END, "\nMax Amplitude " + str(wave_amp.max))


#creates plot for the audio file
def wavePlot():
    wave_plot = d.audioFile
    audio_file = wave.open(wave_plot, "r")
    # Extract Raw Audio from Wav File
    raw_audio = audio_file.readframes(-1)
    print(type(raw_audio))
    amp = np.fromstring(raw_audio, "int16")
    fs = audio_file.getframerate()

    time = np.linspace(0, len(amp) / fs, num=len(amp))

    plt.figure(1)
    plt.title("Signal Wave...")
    plt.xlabel("Time [s]")
    plt.ylabel("Amplitude")
    plt.legend()
    plt.plot(time, amp)
    plt.show()

def intensityPlot():
    intensity_plot = d.audioFile
    audio_file = wave.open(intensity_plot, "r")
    # Extract Raw Audio from Wav File
    raw_audio = audio_file.readframes(-1)
    print(type(raw_audio))
    fre = np.fromstring(raw_audio, "int16")
    fs = audio_file.getframerate()

    time = np.linspace(0, len(fre) / fs, num=len(fre))

    # Step 3: Compute the spectrogram
    frequencies, times, Sxx = spectrogram(fre, fs=fs)

    # Step 4: Plot the intensity (spectrogram)
    plt.figure(figsize=(10, 6))
    plt.pcolormesh(times, frequencies, 10 * np.log10(Sxx), shading='auto')  # Log scale for intensity

    plt.figure(1)
    plt.title("Frequency Graph...")
    plt.xlabel("Time [s]")
    plt.ylabel("Frequency [HZ]")
    plt.legend()
    plt.colorbar(label='Intensity [dB]')
    plt.plot(time, fre)
    plt.show()


def lowrt60graph():
    # Assuming d.audioFile holds the path to the wav file
    rt60_plot = d.audioFile  # Replace with actual file path or audio data source
    audio_file = wave.open(rt60_plot, "r")

    # Extract Raw Audio from Wav File
    raw_audio = audio_file.readframes(-1)
    print(type(raw_audio))  # Check the type of raw_audio (should be bytes)

    # Convert raw audio bytes to numpy array
    fre = np.frombuffer(raw_audio, dtype="int16")
    fs = audio_file.getframerate()  # Sampling frequency (frames per second)

    # Step 1: Get the power of the audio signal (absolute value)
    opower = np.abs(fre)

    # Step 2: Convert power to a logarithmic scale (dB)
    power = 20 * np.log10(opower + 1e-6)

    # Step 3: Trim power to make signal start at 0 dB
    power -= np.max(power)

    # Generate time axis based on the length of the signal and sampling frequency
    time = np.linspace(0, len(fre) / fs, num=len(fre))

    decay_threshold = -10
    title = "Low RT60 Graph"


    # Step 4: Find the index where power drops below the threshold
    decay_start_idx = np.argmax(power < decay_threshold)  # First index where power < threshold
    decay_times = time[decay_start_idx:]  # Corresponding time values
    decay_db = power[decay_start_idx:]  # Corresponding power values in dB

    # Step 5: Plot the RT60 decay curve
    plt.figure(figsize=(10, 6))
    #plt.plot(time, power, label="Power (dB)", color="b")  # Full power curve
    plt.plot(decay_times, decay_db, label=f"Decay (Threshold: {decay_threshold} dB)", color="r", linestyle="--")
    plt.title(title)
    plt.xlabel("Time [s]")
    plt.ylabel("Power [dB]")
    plt.legend()
    plt.grid(True)
    plt.show()

def mediumrt60graph():
    # Assuming d.audioFile holds the path to the wav file
    rt60_plot = d.audioFile  # Replace with actual file path or audio data source
    audio_file = wave.open(rt60_plot, "r")

    # Extract Raw Audio from Wav File
    raw_audio = audio_file.readframes(-1)
    print(type(raw_audio))  # Check the type of raw_audio (should be bytes)

    # Convert raw audio bytes to numpy array
    fre = np.frombuffer(raw_audio, dtype="int16")
    fs = audio_file.getframerate()  # Sampling frequency (frames per second)

    # Step 1: Get the power of the audio signal (absolute value)
    opower = np.abs(fre)

    # Step 2: Convert power to a logarithmic scale (dB)
    power = 20 * np.log10(opower + 1e-6)

    # Step 3: Trim power to make signal start at 0 dB
    power -= np.max(power)

    # Generate time axis based on the length of the signal and sampling frequency
    time = np.linspace(0, len(fre) / fs, num=len(fre))

    decay_threshold = -5
    title = "Medium RT60 Graph"

    # Step 4: Find the index where power drops below the threshold
    decay_start_idx = np.argmax(power < decay_threshold)  # First index where power < threshold
    decay_times = time[decay_start_idx:]  # Corresponding time values
    decay_db = power[decay_start_idx:]  # Corresponding power values in dB

    # Step 5: Plot the RT60 decay curve
    plt.figure(figsize=(10, 6))
    #plt.plot(time, power, label="Power (dB)", color="b")  # Full power curve
    plt.plot(decay_times, decay_db, label=f"Decay (Threshold: {decay_threshold} dB)", color="g", linestyle="--")
    plt.title(title)
    plt.xlabel("Time [s]")
    plt.ylabel("Power [dB]")
    plt.legend()
    plt.grid(True)
    plt.show()

def highrt60graph():
    # Assuming d.audioFile holds the path to the wav file
    rt60_plot = d.audioFile  # Replace with actual file path or audio data source
    audio_file = wave.open(rt60_plot, "r")

    # Extract Raw Audio from Wav File
    raw_audio = audio_file.readframes(-1)
    print(type(raw_audio))  # Check the type of raw_audio (should be bytes)

    # Convert raw audio bytes to numpy array
    fre = np.frombuffer(raw_audio, dtype="int16")
    fs = audio_file.getframerate()  # Sampling frequency (frames per second)

    # Step 1: Get the power of the audio signal (absolute value)
    opower = np.abs(fre)

    # Step 2: Convert power to a logarithmic scale (dB)
    power = 20 * np.log10(opower + 1e-6)

    # Step 3: Trim power to make signal start at 0 dB
    power -= np.max(power)

    # Generate time axis based on the length of the signal and sampling frequency
    time = np.linspace(0, len(fre) / fs, num=len(fre))

    decay_threshold = -3
    title = "High RT60 Graph"

    # Step 4: Find the index where power drops below the threshold
    decay_start_idx = np.argmax(power < decay_threshold)  # First index where power < threshold
    decay_times = time[decay_start_idx:]  # Corresponding time values
    decay_db = power[decay_start_idx:]  # Corresponding power values in dB

    # Step 5: Plot the RT60 decay curve
    plt.figure(figsize=(10, 6))
    #plt.plot(time, power, label="Power (dB)", color="b")  # Full power curve
    plt.plot(decay_times, decay_db, label=f"Decay (Threshold: {decay_threshold} dB)", color="b", linestyle="--")
    plt.title(title)
    plt.xlabel("Time [s]")
    plt.ylabel("Power [dB]")
    plt.legend()
    plt.grid(True)
    plt.show()


# def rt60graph():
#
#     rt60_plot = d.audioFile
#     audio_file = wave.open(rt60_plot, "r")
#     # Extract Raw Audio from Wav File
#     raw_audio = audio_file.readframes(-1)
#     print(type(raw_audio))
#     fre = np.fromstring(raw_audio, "int16")
#     fs = audio_file.getframerate()
#
#     #start geting the power of the audion  file
#     opower = np.abs(fre)
#
#     # Step 2: Convert power to a logarithmic scale (dB)
#     power = 20 * np.log10(opower + 1e-6)
#
#     # Step 3: Trim power to make signal starts at 0 dB
#     power -= np.max(power)
#
#     time = np.linspace(0, len(fre) / fs, num=len(fre))
#     if Count.getcount == 1:
#         power = np.argmax(power -10)
#         plt.figure(1)
#         plt.title("low RT60 Graph")
#         plt.xlabel("Time [s]")
#         plt.ylabel("Power [db]")
#         plt.legend()
#         plt.plot(time, power)
#         plt.show()
#
#     if (Count.getcount == 2):
#         power = np.argmax(power -5)
#         plt.figure(1)
#         plt.title("medium RT60 Graph")
#         plt.xlabel("Time [s]")
#         plt.ylabel("Power [db]")
#         plt.legend()
#         plt.plot(time, power)
#         plt.show()
#
#     if (Count.getcount == 3):
#         power = np.argmax(power-3)
#         plt.figure(1)
#         plt.title("high RT60 Graph")
#         plt.xlabel("Time [s]")
#         plt.ylabel("Power [db]")
#         plt.legend()
#         plt.plot(time, power)
#         plt.show()

def rt60graphcombine():
    # Assuming d.audioFile holds the path to the wav file
    rt60_plot = d.audioFile  # Replace with actual file path or audio data source
    audio_file = wave.open(rt60_plot, "r")

    # Extract Raw Audio from Wav File
    raw_audio = audio_file.readframes(-1)
    print(type(raw_audio))  # Check the type of raw_audio (should be bytes)

    # Convert raw audio bytes to numpy array
    fre = np.frombuffer(raw_audio, dtype="int16")
    fs = audio_file.getframerate()  # Sampling frequency (frames per second)

    # Step 1: Get the power of the audio signal (absolute value)
    opower = np.abs(fre)

    # Step 2: Convert power to a logarithmic scale (dB)
    power = 20 * np.log10(opower + 1e-6)

    # Step 3: Trim power to make signal start at 0 dB
    power -= np.max(power)

    # Generate time axis based on the length of the signal and sampling frequency
    time = np.linspace(0, len(fre) / fs, num=len(fre))

    decay_threshold1 = -10
    decay_threshold2 = -5
    decay_threshold3 = -3
    title = "combined RT60 Graph"

    # Step 4: Find the index where power drops below the threshold
    decay_start_idx1 = np.argmax(power < decay_threshold1)
    decay_start_idx2 = np.argmax(power < decay_threshold2)
    decay_start_idx3 = np.argmax(power < decay_threshold3)
    decay_times1 = time[decay_start_idx1:]  # Corresponding time values
    decay_db1 = power[decay_start_idx1:]  # Corresponding power values in dB

    decay_times2 = time[decay_start_idx2:]  # Corresponding time values
    decay_db2 = power[decay_start_idx2:]  # Corresponding power values in dB
    decay_times3 = time[decay_start_idx3:]  # Corresponding time values
    decay_db3 = power[decay_start_idx3:]  # Corresponding power values in dB

    # Step 5: Plot the RT60 decay curve
    plt.figure(figsize=(10, 6))
    plt.plot(decay_times1, decay_db1, label=f"Decay (Threshold: {decay_threshold1} dB)", color="r", linestyle="--")

    plt.plot(decay_times2, decay_db2, label=f"Decay (Threshold: {decay_threshold2} dB)", color="g", linestyle="--")

    plt.plot(decay_times3, decay_db3, label=f"Decay (Threshold: {decay_threshold3} dB)", color="b", linestyle="--")
    plt.title(title)
    plt.xlabel("Time [s]")
    plt.ylabel("Power [dB]")
    plt.legend()
    plt.grid(True)
    plt.show()

def guiplot():
    from view import guiView
    filename = checkifwav.audioFile
    # Creates an object from the Figure class, allows a plot to be in the tkinter GUI
    fig = Figure(figsize=(5, 5), dpi=100)

    rate, data = wavfile.read(filename)  # reading wave file.
    c = data[0:9999]

    p = fig.gca()
    p.hist(c, bins='auto')  # arguments are passed to np.histogram.

    canvas = FigureCanvasTkAgg(fig, guiView)
    canvas.draw()
    canvas.get_tk_widget().pack()

